import pytest
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIClient
from .models import Product

@pytest.mark.django_db
def test_find_products_by_category():
    # Setup: Create product instances with various categories
    product1 = Product.objects.create(
        name='Product 1',
        description='Description for product 1',
        price=50.00,
        category='Category A',
        availability=True
    )
    product2 = Product.objects.create(
        name='Product 2',
        description='Description for product 2',
        price=75.00,
        category='Category A',
        availability=True
    )
    product3 = Product.objects.create(
        name='Product 3',
        description='Description for product 3',
        price=100.00,
        category='Category B',
        availability=True
    )
    
    # Create an instance of the APIClient
    client = APIClient()

    # Send a GET request to the find by category endpoint
    # Assuming the endpoint is 'product-find-by-category' and uses query parameters
    response = client.get(reverse('product-find-by-category') + '?category=Category A')

    # Assert the response status code
    assert response.status_code == status.HTTP_200_OK

    # Assert that the response data contains the correct products
    response_data = response.json()
    assert len(response_data) == 2  # Ensure only products from 'Category A' are returned
    assert any(product['name'] == 'Product 1' for product in response_data)
    assert any(product['name'] == 'Product 2' for product in response_data)
    assert all(product['category'] == 'Category A' for product in response_data)
